snippet react:connected "Initialise a connected react component"
import React from 'react';
import PropTypes from 'prop-types'
import { connect } from 'react-redux'

class ${1:MyComponent} extends React.Component {
  constructor(props) {
    super(props);
      // this.state = {};
  }
  render() {
    return (<div>$2</div>);
  }
}

$1.propTypes = {
  children: PropTypes.node,
  params: PropTypes.object,
};

$1.contextTypes = {
  store: PropTypes.object
};

const fetchDataAction = (payload) => ({
  type: 'FETCH_DATA',
  payload
})

export default connect(
  (state, ownProps) => ({
    data: state.date || {}
  }),
  {
    fetchDataAction
  }
)($1);
endsnippet

snippet react:component "define a react component"
import React from 'react';
import PropTypes from 'prop-types'

class ${1:MyComponent} extends React.Component {
  render() {
    return (<div>$2</div>);
  }
}
endsnippet


snippet react:props "Add props"
  static propTypes = {
	${1:prop}: PropTypes.string
  }
  static defaultProps = {
	${1}: "string"
  }
endsnippet

snippet react:function "define statelss component"
import PropTypes from 'prop-types'

export default const ${1:MyComponent} = (props, context) => <div>${2}</div>;$0
$1.contextTypes = {
  store: PropTypes.object
}
endsnippet

snippet react:provider "getChildContext()"
import React from 'react';
import PropTypes from 'prop-types'

export class ${1:Provider} extends React.Component {
  getChildContext() {
    return {
      ${2:store}: this.props.$2
    }
  }
  render() {
    return this.props.children;
  }
}

$1.childContextTypes = {
  $2: PropTypes.object
};
endsnippet

snippet react:shouldupdate "shouldComponentUpdate()"
shouldComponentUpdate(nextProps, nextState) {
  ${1}
}$0
endsnippet

snippet react:didmount "componentDidMount()" b
componentDidMount() {
  ${1}
}$0
endsnippet

snippet react:didupdate "componentDidUpdate()" b
componentDidUpdate(prevProps, prevState) {
  ${1}
}$0
endsnippet

snippet react:willmount "componentWillMount()" b
componentWillMount() {
  ${1}
}$0
endsnippet

snippet react:willprops "componentWillReceiveProps()" b
componentWillReceiveProps(nextProps) {
  ${1}
}$0
endsnippet

snippet react:willunmount "componentWillUnmount()" b
componentWillUnmount() {
  ${1}
}$0
endsnippet

snippet react:willupdate "componentWillUpdate()" b
componentWillUpdate(nextProps, nextState) {
  ${1}
}$0
endsnippet

snippet react:fup "forceUpdate()"
forceUpdate(${1:callback});
endsnippet

snippet reactdom:render "ReactDOM.render()"
ReactDOM.render(
  ${1:<div></div>},
  document.getElementById('app')
);
endsnippet

snippet react:map "react.map" i
React.Children.map(${1:children}, (${2:child}, index) =>
  ( <div key={index}>$2</div> ) )
endsnippet
